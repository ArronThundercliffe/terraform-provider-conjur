#!/bin/bash
set -eo pipefail

TARGET="${1:-oss}"  # can also be set to 'enterprise'

export CONJUR_ACCOUNT='myaccount'
export CONJUR_DATA_KEY='iFra75qdvsLENSV+qXYFMkv7KJS3t+82Po4mmjZLxZc='

CONJUR_AUTHN_PASSWORD='SEcret12!!!!'
LOCAL_SECRET_FILE='test/dbpass'

function finish() {
  if [[ -z "$KEEP_CONTAINERS" ]]; then
    echo "> Terminating local Conjur environment"

    rm -f $LOCAL_SECRET_FILE
    dockerCompose down -v
  else
    echo "> KEEP_CONTAINERS is set, not terminating local Conjur environment"
  fi
}
trap finish EXIT

function main() {
  checkTarget
  loadUtils

  launchConjur
  configureConjur
  runTerraform
  validateResults
}

function checkTarget() {
  case "$TARGET" in
  "oss")
    export DOCKER_COMPOSE_ARGS="-f docker-compose.oss.yml -f docker-compose.yml"
    export CONJUR_WAIT_COMMAND="conjurctl wait"
    ;;
  "enterprise")
    export DOCKER_COMPOSE_ARGS="-f docker-compose.enterprise.yml -f docker-compose.yml"
    export CONJUR_WAIT_COMMAND="/opt/conjur/evoke/bin/wait_for_conjur"
    ;;
  *)
    echo "> '$TARGET' is not a supported target"
    exit 1
    ;;
  esac
}

function loadUtils() {
  cwd="$(dirname "$0")"
  # shellcheck source=utils.sh
  . "$cwd/utils.sh"
}

function launchConjur() {
  echo "> Launching local Conjur environment"

  dockerCompose pull -q

  dockerCompose up -d conjur-server

  echo ">> Creating account '$CONJUR_ACCOUNT'"
  if [[ "$TARGET" == "enterprise" ]]; then
    conjurExec evoke configure master \
      --accept-eula \
      -h conjur-server \
      -p "$CONJUR_AUTHN_PASSWORD" \
      "$CONJUR_ACCOUNT"
  else
    # We need to wait for Conjur OSS to establish a DB connection before
    # attempting to create the account
    conjurExec $CONJUR_WAIT_COMMAND
    conjurExec conjurctl account create "$CONJUR_ACCOUNT"
  fi

  echo ">> Waiting on conjur..."
  conjurExec $CONJUR_WAIT_COMMAND
}

function configureConjur() {
  echo "> Configuring local Conjur environment"

  export CONJUR_AUTHN_LOGIN="admin"

  export CONJUR_APPLIANCE_URL=http://conjur-server
  if [[ "$TARGET" == "enterprise" ]]; then
    export CONJUR_APPLIANCE_URL=https://conjur-server
    export CONJUR_SSL_CERTIFICATE="$(conjurExec cat /opt/conjur/etc/ssl/conjur.pem)"
  fi

  if [[ "$TARGET" == "oss" ]]; then
    export CONJUR_AUTHN_API_KEY=$(conjurExec conjurctl role retrieve-key \
      "$CONJUR_ACCOUNT:user:admin" | tr -d '\r')
  fi

  echo ">> Applying policies"
  dockerCompose up -d client

  if [[ "$TARGET" == "enterprise" ]]; then
    echo ">> Logging in CLI to the server"
    clientExec conjur authn login -u admin -p "$CONJUR_AUTHN_PASSWORD"
    export CONJUR_AUTHN_API_KEY=$(clientExec conjur user rotate_api_key)
  fi

  echo ">> Applying policies"
  # Policy files are mounted in docker-compose
  clientExec conjur policy load --replace root /test/policy.root.yml
  clientExec conjur policy load terraform-example /test/policy.example.yml
  clientExec conjur list
  clientExec conjur variable values add terraform-example/dbpass SECRETXcLhn23MJcimV
}

function runTerraform() {
  echo "> Planning and applying main.tf Terraform manifest"

  export CONJUR_APPLIANCE_URL=http://conjur-server
  export CONJUR_ACCOUNT="$CONJUR_ACCOUNT"
  export CONJUR_AUTHN_LOGIN="admin"
  export TF_LOG=INFO

  if [[ "$TARGET" == "enterprise" ]]; then
    export CONJUR_APPLIANCE_URL=https://conjur-server
    export CONJUR_SSL_CERTIFICATE="$(conjurExec cat /opt/conjur/etc/ssl/conjur.pem)"
  fi

  dockerCompose up -d terraform

  terraformRun <<EOF
    terraform init test/
    terraform plan test/
    terraform apply -auto-approve test/
EOF
}

function validateResults() {
  local expectedValue="SECRETXcLhn23MJcimV"
  local actualValue=$(cat $LOCAL_SECRET_FILE)

  if [[ "$expectedValue" == "$actualValue" ]]; then
    echo "Secret succesfully retrieved!"
  else
    echo "Secret not successfully retrieved."
    echo "Expected '$expectedValue', got '$actualValue'"
    exit 1
  fi
}

main
